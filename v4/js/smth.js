// Generated by CoffeeScript 1.9.3
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.gen_lines = function(data, scale_coeff, detail, range, options, mode) {
    var calc_color, fn, i_first, i_last, i_limit, i_size, j, j_first, j_last, j_limit, j_size, k, k_first, k_last, k_limit, k_size, l, m, ref, ref1, ref2, ref3, ref4, ref5, results;
    k_first = 0;
    j_first = 0;
    i_first = 0;
    k_last = data.length - 1;
    j_last = data[0].length - 1;
    i_last = data[0][0].length - 1;
    k_size = k_last - k_first;
    j_size = j_last - j_first;
    i_size = i_last - i_first;
    k_limit = Math.ceil(data.length / detail[0]) * detail[0];
    j_limit = Math.ceil(data[0].length / detail[1]) * detail[1];
    i_limit = Math.ceil(data[0][0].length / detail[2]) * detail[2];
    calc_color = function(k, j, i) {
      var i_coeff, j_coeff, k_coeff;
      k_coeff = (k - k_first) / k_size;
      j_coeff = (j - j_first) / j_size;
      i_coeff = (i - i_first) / i_size;
      return ((0xff * k_coeff) << 16) + ((0xff * j_coeff) << 8) + (0xff * i_coeff);
    };
    fn = function(k) {
      var fn1, i, j, m, n, ref3, ref4, ref5, ref6, ref7, ref8, results;
      if (k > k_last) {
        k = k_last;
      }
      fn1 = function(j) {
        var color, fn2, i, n, pnts, ref6, ref7, width;
        if (j > j_last) {
          j = j_last;
        }
        pnts = [];
        fn2 = function(i) {
          return pnts.push(data[k][j][i][0], data[k][j][i][1], data[k][j][i][2]);
        };
        for (i = n = ref6 = i_first, ref7 = i_last; ref6 <= ref7 ? n <= ref7 : n >= ref7; i = ref6 <= ref7 ? ++n : --n) {
          fn2(i);
        }
        if ((k === k_first || k === k_last) && (j === j_first || j === j_last)) {
          width = 2.5;
        } else {
          width = 1;
        }
        if ((k === k_first || k === k_last) || (j === j_first || j === j_last)) {
          color = 0x000000;
        } else {
          color = calc_color(k, j, i_last - i_first) / 2;
        }
        return add_line(pnts, scale_coeff, color, width);
      };
      for (j = m = ref3 = j_first, ref4 = j_limit, ref5 = detail[1]; ref5 > 0 ? m <= ref4 : m >= ref4; j = m += ref5) {
        fn1(j);
      }
      results = [];
      for (i = n = ref6 = i_first, ref7 = i_limit, ref8 = detail[2]; ref8 > 0 ? n <= ref7 : n >= ref7; i = n += ref8) {
        results.push((function(i) {
          var color, fn2, o, pnts, ref10, ref9, width;
          if (i > i_last) {
            i = i_last;
          }
          pnts = [];
          fn2 = function(j) {
            return pnts.push(data[k][j][i][0], data[k][j][i][1], data[k][j][i][2]);
          };
          for (j = o = ref9 = j_first, ref10 = j_last; ref9 <= ref10 ? o <= ref10 : o >= ref10; j = ref9 <= ref10 ? ++o : --o) {
            fn2(j);
          }
          if ((k === k_first || k === k_last) && (i === i_first || i === i_last)) {
            width = 2.5;
          } else {
            width = 1;
          }
          if ((k === k_first || k === k_last) || (i === i_first || i === i_last)) {
            color = 0x000000;
          } else {
            color = calc_color(k, (j_last - j_first) / 2, i);
          }
          return add_line(pnts, scale_coeff, color, width);
        })(i));
      }
      return results;
    };
    for (k = l = ref = k_first, ref1 = k_limit, ref2 = detail[0]; ref2 > 0 ? l <= ref1 : l >= ref1; k = l += ref2) {
      fn(k);
    }
    results = [];
    for (j = m = ref3 = j_first, ref4 = j_limit, ref5 = detail[1]; ref5 > 0 ? m <= ref4 : m >= ref4; j = m += ref5) {
      results.push((function(j) {
        var i, n, ref6, ref7, ref8, results1;
        if (j > j_last) {
          j = j_last;
        }
        results1 = [];
        for (i = n = ref6 = i_first, ref7 = i_limit, ref8 = detail[2]; ref8 > 0 ? n <= ref7 : n >= ref7; i = n += ref8) {
          results1.push((function(i) {
            var color, fn1, o, pnts, ref10, ref9, width;
            if (i > i_last) {
              i = i_last;
            }
            pnts = [];
            fn1 = function(k) {
              return pnts.push(data[k][j][i][0], data[k][j][i][1], data[k][j][i][2]);
            };
            for (k = o = ref9 = k_first, ref10 = k_last; ref9 <= ref10 ? o <= ref10 : o >= ref10; k = ref9 <= ref10 ? ++o : --o) {
              fn1(k);
            }
            if ((j === j_first || j === j_last) && (i === i_first || i === i_last)) {
              width = 2.5;
            } else {
              width = 1;
            }
            if ((j === j_first || j === j_last) || (i === i_first || i === i_last)) {
              color = 0x000000;
            } else {
              color = calc_color((k_last - k_first) / 2, j, i);
            }
            return add_line(pnts, scale_coeff, color, width);
          })(i));
        }
        return results1;
      })(j));
    }
    return results;
  };

  root.gen_spheres = function(data, scale_coeff, detail, range, options, mode) {
    var calc_color, i_first, i_last, j_first, j_last, k, k_first, k_last, l, len, ref, results;
    k_first = 0;
    j_first = 0;
    i_first = 0;
    k_last = data.length - 1;
    j_last = data[0].length - 1;
    i_last = data[0][0].length - 1;
    calc_color = function(k, j, i) {
      return ((k === k_first ? 0x00 : 0xff) << 16) + ((j === j_first ? 0x00 : 0xff) << 8) + (i === i_first ? 0x00 : 0xff);
    };
    ref = [k_first, k_last];
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      k = ref[l];
      results.push((function(k) {
        var j, len1, m, ref1, results1;
        ref1 = [j_first, j_last];
        results1 = [];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          j = ref1[m];
          results1.push((function(j) {
            var i, len2, n, ref2, results2;
            ref2 = [i_first, i_last];
            results2 = [];
            for (n = 0, len2 = ref2.length; n < len2; n++) {
              i = ref2[n];
              results2.push((function(i) {
                var color, position;
                position = data[k][j][i].slice(0, 3);
                color = calc_color(k, j, i);
                return add_sphere(position, scale_coeff, color, 0.1);
              })(i));
            }
            return results2;
          })(j));
        }
        return results1;
      })(k));
    }
    return results;
  };

  root.add_line = function(pnts, scale_coeff, color, width) {
    var geometry, material, pnt, sceneObject;
    if (width == null) {
      width = 1;
    }
    pnts = (function() {
      var l, len, results;
      results = [];
      for (l = 0, len = pnts.length; l < len; l++) {
        pnt = pnts[l];
        results.push(pnt * scale_coeff);
      }
      return results;
    })();
    geometry = new THREE.BufferGeometry();
    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(pnts), 3));
    geometry.computeBoundingSphere();
    material = new THREE.LineBasicMaterial({
      color: color,
      linewidth: width
    });
    sceneObject = new THREE.Line(geometry, material);
    threejs.scene.add(sceneObject);
    return obj.add(sceneObject);
  };

  root.add_sphere = function(position, scale_coeff, color, size) {
    var geometry, material, sceneObject;
    geometry = new THREE.SphereBufferGeometry(size);
    material = new THREE.MeshBasicMaterial({
      color: color
    });
    sceneObject = new THREE.Mesh(geometry, material);
    threejs.scene.add(sceneObject);
    sceneObject.position.x = position[0] * scale_coeff;
    sceneObject.position.y = position[1] * scale_coeff;
    sceneObject.position.z = position[2] * scale_coeff;
    return obj.add(sceneObject);
  };

  root.Smth = {
    init: function(data, scale_coeff, detail, range, options, mode) {
      root.obj = new THREE.Object3D();
      gen_lines(data, scale_coeff, detail, range, options, mode);
      gen_spheres(data, scale_coeff, detail, range, options, mode);
      console.log("Detail: ", detail);
      console.log("Objects:", root.obj.children.length);
      console.log("ok :D");
      return root.obj;
    }
  };

  console.log("Smth init");

}).call(this);
