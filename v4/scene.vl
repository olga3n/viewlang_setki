import "obj"

Scene 
{
	id: thescene
	text: ""
	
	property var script_gui_flag: false
	property var script_grid_flag: false

	property var q: script_init()

	function script_init()
	{
		if ( !script_gui_flag )
			la_require( 
				$basePath + "lib/dat.gui/build/dat.gui.min.js",
				function() { 
					
					// add remove folder function
					dat.GUI.prototype.removeFolder = function(name) {
						var folder = this.__folders[name];
						if (!folder) return;
						folder.close();
						this.__ul.removeChild(folder.domElement.parentNode);
						delete this.__folders[name];
						this.onResize();
					}

					script_gui_flag = true; 
				});

		if ( !script_grid_flag )
			la_require( 
				$basePath + "js/grid.js", 
				function() { script_grid_flag = true; });
	}

	FileParam
	{
		id: inputFile
		text: "Grid file:"
		file: Qt.resolvedUrl( "../ris5.dat" )
	}

	Load
	{
		id: loader
		file: inputFile.file
	}

	Axis { }

	Repeater
	{
		id: grid
		model: loader.grid.length

		property var gui
		property var q: init_controls()

		property var f_blocks
		property var f_visible
		property var f_detail
		property var f_filter

		property var controls: {}
		property var d_controls: {}
		property var s_controls: {}
		property var fs_controls: {}
		property var id_controls: []

		property var filter_block: -1
		property var filter_detail_i: [1, 1, 1]
		property var filter_detail_j: [1, 1, 1]
		property var filter_detail_k: [1, 1, 1]
		property var items_filter: []

		property var style_default: true
		property var lines_style: []
		property var faces_style: []

		property var fstyle_default: true
		property var lines_fstyle: []
		property var faces_fstyle: []

		property var lstate: 0
		property var fstate: 0

		onLstateChanged: {

			if (style_default != s_controls["Default Style"])
				style_default = s_controls["Default Style"];

			var ls_visible = [
				s_controls["lines i"], 
				s_controls["lines j"],
				s_controls["lines k"]];
			var ls_colors = [
				s_controls["lines i color"], 
				s_controls["lines j color"], 
				s_controls["lines k color"], 
				s_controls["border color"]];
			var ls_options = [
				s_controls["lines dashed"], 
				s_controls["border bold"]];

			lines_style = [ ls_visible, ls_colors, ls_options ];

			if (fstyle_default != fs_controls["Default Style"])
				fstyle_default = fs_controls["Default Style"];

			var lfs_visible = [
				fs_controls["lines i"], 
				fs_controls["lines j"],
				fs_controls["lines k"]];
			var lfs_colors = [
				fs_controls["lines i color"], 
				fs_controls["lines j color"], 
				fs_controls["lines k color"], 
				fs_controls["border color"]];
			var lfs_options = [
				fs_controls["lines dashed"], 
				fs_controls["border bold"]];

			lines_fstyle = [ lfs_visible, lfs_colors, lfs_options ];
		}

		onFstateChanged: {

			if (style_default != s_controls["Default Style"])
				style_default = s_controls["Default Style"];

			var fs_visible = [
				s_controls["faces ij"], 
				s_controls["faces ik"], 
				s_controls["faces jk"]];
			var fs_colors = [
				s_controls["faces ij color"], 
				s_controls["faces ik color"], 
				s_controls["faces jk color"] ];
			var fs_options = [
				s_controls["faces opacity"]];

			faces_style = [ fs_visible, fs_colors, fs_options ];

			if (fstyle_default != fs_controls["Default Style"])
				fstyle_default = fs_controls["Default Style"];

			var ffs_visible = [
				fs_controls["faces ij"], 
				fs_controls["faces ik"], 
				fs_controls["faces jk"]];
			var ffs_colors = [
				fs_controls["faces ij color"], 
				fs_controls["faces ik color"], 
				fs_controls["faces jk color"] ];
			var ffs_options = [
				fs_controls["faces opacity"]];

			faces_fstyle = [ ffs_visible, ffs_colors, ffs_options ];
		}

		function init_controls()
		{
			if ( script_gui_flag )
			{
				gui = new dat.GUI( { width: 350 } );

				f_blocks = gui.addFolder('Blocks');
				f_blocks.open();

				f_visible = f_blocks.addFolder("Visible");
				f_detail = f_blocks.addFolder("Detail");

				s_controls["lines i"] = true;
				s_controls["lines j"] = true;
				s_controls["lines k"] = true;
				s_controls["lines i color"] = "#ffffff";
				s_controls["lines j color"] = '#ffffff';
				s_controls["lines k color"] = '#ffffff';
				s_controls["lines dashed"] = false;
				s_controls["border color"] = '#000000';
				s_controls["border bold"] = true;
				
				s_controls["faces ij"] = false;
				s_controls["faces ik"] = false;
				s_controls["faces jk"] = false;
				s_controls["faces ij color"] = '#00ffff';
				s_controls["faces ik color"] = '#ff00ff';
				s_controls["faces jk color"] = '#ffff00';
				s_controls["faces opacity"] = 0.2;

				s_controls["Default Style"] = true;

				var c = f_blocks.add(s_controls, "Default Style");

				c.onFinishChange(function(value)
				{ 
					if ( value ) 
					{
						f_blocks.removeFolder("Lines Style");
						f_blocks.removeFolder("Faces Style");
					} 
					else 
					{
						grid.add_style_folders();
						grid.lstate = (grid.lstate + 1) % 2;
						grid.fstate = (grid.fstate + 1) % 2;
					}
					grid.style_default = value;
				});	

				f_filter = gui.addFolder('Filter');

				fs_controls["lines i"] = true;
				fs_controls["lines j"] = true;
				fs_controls["lines k"] = true;
				fs_controls["lines i color"] = "#000000";
				fs_controls["lines j color"] = '#000000';
				fs_controls["lines k color"] = '#000000';
				fs_controls["lines dashed"] = false;
				fs_controls["border color"] = '#0000ff';
				fs_controls["border bold"] = true;
				
				fs_controls["faces ij"] = true;
				fs_controls["faces ik"] = true;
				fs_controls["faces jk"] = true;
				fs_controls["faces ij color"] = '#00ff88';
				fs_controls["faces ik color"] = '#8800ff';
				fs_controls["faces jk color"] = '#ff8800';
				fs_controls["faces opacity"] = 0.2;

				fs_controls["Default Style"] = true;
			}
		}

		function add_style_controls(f_lines, f_faces, controls)
		{
			var change_l = 
				function(value) { grid.lstate = (grid.lstate + 1) % 2; }
			var change_f = 
				function(value) { grid.fstate = (grid.fstate + 1) % 2; }

			f_lines.add(controls, "lines i").onFinishChange(change_l); 
			f_lines.add(controls, "lines j").onFinishChange(change_l); 
			f_lines.add(controls, "lines k").onFinishChange(change_l); 
			f_lines.addColor(controls, "lines i color").onChange(change_l); 
			f_lines.addColor(controls, "lines j color").onChange(change_l); 
			f_lines.addColor(controls, "lines k color").onChange(change_l); 
			f_lines.add(controls, "lines dashed").onFinishChange(change_l); 
			f_lines.addColor(controls, "border color").onChange(change_l); 
			f_lines.add(controls, "border bold").onFinishChange(change_l); 
							
			f_faces.add(controls, "faces ij").onFinishChange(change_f);
			f_faces.add(controls, "faces ik").onFinishChange(change_f);
			f_faces.add(controls, "faces jk").onFinishChange(change_f);
			f_faces.addColor(controls, "faces ij color").onChange(change_f);
			f_faces.addColor(controls, "faces ik color").onChange(change_f);
			f_faces.addColor(controls, "faces jk color").onChange(change_f);
			f_faces.add(controls, "faces opacity", 0, 1).step(0.05)
				.onFinishChange(change_f);
		}

		function add_style_folders()
		{
			var f_lines = f_blocks.addFolder("Lines Style");
			var f_faces = f_blocks.addFolder("Faces Style");

			add_style_controls(f_lines, f_faces, s_controls);
		}

		function add_fstyle_folders()
		{
			var f_lines = f_filter.addFolder("Lines Style");
			var f_faces = f_filter.addFolder("Faces Style");

			add_style_controls(f_lines, f_faces, fs_controls);
		}

		Item
		{
			id: block
			property var z: index

			property var q: add_controls()

			property var option_visible: true
			property var option_detail: [
					Math.floor(loader.grid[ index ].length / 25) * 2 + 1,
					Math.floor(loader.grid[ index ][0].length / 25) * 2 + 1,
					Math.floor(loader.grid[ index ][0][0].length / 25) * 2 + 1
				]
			
			function add_controls()
			{
				if (block.z == 0 && grid.id_controls.length > 0) {

					while(grid.id_controls.length > 0)
					{
						var c = grid.id_controls.pop();
						c[0].remove(c[1]);
					}

					while(grid.items_filter.length > 0)
					{
						var c = grid.items_filter.pop();
						grid.f_filter.remove(c);
					}

					grid.f_filter.removeFolder("Lines Style");
					grid.f_filter.removeFolder("Faces Style");
				}

				var name = "#" + (block.z + 1).toString() + " visible";

				grid.controls[ name ] = true;
				
				var c = grid.f_visible.add(grid.controls, name);
				
				c.onFinishChange(function(value){ 
						block.option_visible = value;
					});

				grid.id_controls.push([grid.f_visible, c]);

				var d = [
					loader.grid[ block.z ].length, 
					loader.grid[ block.z ][0].length, 
					loader.grid[ block.z ][0][0].length]

				name = '#' + (block.z + 1).toString() + " (" + 
					d[2].toString() + ", " + 
					d[1].toString() + ", " +
					d[0].toString() + ")";

				for (var i = 0; i < 3; i++) 
					d[i] = Math.floor(d[i] / 25) * 2 + 1;

				grid.d_controls[ name ] = "di = " +
					d[2].toString() + ", dj = " + 
					d[1].toString() + ", dk = " +
					d[0].toString();

				block.option_detail = d;

				var c = grid.f_detail.add(grid.d_controls, name).listen();

				grid.id_controls.push([grid.f_detail, c]);
				
				c.onFinishChange(function(value)
				{ 
					var numb = value.match(/\d+/g);
						
					if(!!numb && numb.length >= 3) {
						block.option_detail = [ 
							parseInt(numb[2]), 
							parseInt(numb[1]), 
							parseInt(numb[0]) ];
					} else {
						block.option_detail = [1, 1, 1];
						value =	'di = 1, dj = 1, dk = 1';
					}
				});

				if (block.z == loader.grid.length - 1) {
					
					grid.controls["all points"] = function() {
						for ( var i = 0; i < grid['$items'].length; i++ )
							grid['$items'][i].option_detail = [1, 1, 1];

						for ( k in grid.d_controls )
							grid.d_controls[k] = 'di = 1, dj = 1, dk = 1';
					};

					var c = grid.f_detail.add(grid.controls, "all points");

					grid.id_controls.push([grid.f_detail, c]);

					// filter

					grid.controls["Block"] = "";

					var lst = [""];

					for ( var i = 1; i <= loader.grid.length; i++ ) 
						lst.push(i.toString());

					var c = grid.f_filter.add(grid.controls, "Block", lst);

					grid.id_controls.push([grid.f_filter, c]);

					c.onFinishChange(function(value)
					{
						if (value != "")
						{
							grid.filter_block = value - 1;

							while(grid.items_filter.length > 0)
							{
								var c = grid.items_filter.pop();
								grid.f_filter.remove(c);
							}

							grid.f_filter.removeFolder("Lines Style");
							grid.f_filter.removeFolder("Faces Style");

							var c, t, l; 

							l = loader.grid[value - 1][0][0].length;
							t = "i (" + l.toString() + ")";
							grid.controls[t] = 
								"from 1 to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_i = [0, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb && numb.length >= 3) {
									grid.filter_detail_i = [ 
										parseInt(numb[0]) - 1, 
										parseInt(numb[1]) - 1, 
										parseInt(numb[2]) ];
								} else {
									l = loader.grid[
										grid.filter_block][0][0].length;
									grid.filter_detail_i = [0, l - 1, 1];

									t = "i (" + l.toString() + ")";
									grid.controls[t] = 
										"from 1 to " + l.toString() + " by 1";
								}
							});

							l = loader.grid[value - 1][0].length;
							t = "j (" + l.toString() + ")";
							grid.controls[t] = 
								"from 1 to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_j = [0, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb && numb.length >= 3) {
									grid.filter_detail_j = [ 
										parseInt(numb[0]) - 1, 
										parseInt(numb[1]) - 1, 
										parseInt(numb[2]) ];
								} else {
									l = loader.grid[
										grid.filter_block][0].length;
									grid.filter_detail_j = [0, l - 1, 1];

									t = "j (" + l.toString() + ")";
									grid.controls[t] = 
										"from 1 to " + l.toString() + " by 1";
								}
							});

							l = loader.grid[value - 1].length;
							t = "k (" + l.toString() + ")";
							grid.controls[t] = "from " + (l - 1).toString() + 
								" to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_k = [l - 2, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb && numb.length >= 3) {
									grid.filter_detail_k = [ 
										parseInt(numb[0]) - 1, 
										parseInt(numb[1]) - 1, 
										parseInt(numb[2]) ];
								} else {
									l = loader.grid[grid.filter_block].length;
									grid.filter_detail_k = [l - 2, l - 1, 1];

									t = "k (" + l.toString() + ")";
									grid.controls[t] = "from " + 
										(l - 1).toString() + " to " + 
										l.toString() + " by 1";
								}
							});

							c = grid.f_filter.add(grid.fs_controls, 
								"Default Style");

							if ( !grid.fstyle_default )
								grid.add_fstyle_folders();

							c.onFinishChange(function(value)
							{ 
								if ( value ) 
								{
									grid.f_filter.removeFolder("Lines Style");
									grid.f_filter.removeFolder("Faces Style");
								}
								else
								{
									grid.add_fstyle_folders();
									grid.lstate = (grid.lstate + 1) % 2;
									grid.fstate = (grid.fstate + 1) % 2;
								}

								grid.fstyle_default = value;
							});

							grid.items_filter.push(c);
						} 
						else
						{
							grid.filter_block = -1;

							while(grid.items_filter.length > 0)
							{
								var c = grid.items_filter.pop();
								grid.f_filter.remove(c);
							}

							grid.f_filter.removeFolder("Lines Style");
							grid.f_filter.removeFolder("Faces Style");
						} 
					});
				}
			}

			GridLines
			{
				visible: block.option_visible

				data: loader.grid[ block.z ]
				scale_coeff: loader.scale_coeff

				detail: block.option_detail
				
				style: grid.style_default ? [] : grid.lines_style

				filter: block.z != grid.filter_block ? []: [
					grid.filter_detail_k,
					grid.filter_detail_j, 
					grid.filter_detail_i ]
				
				fstyle: grid.fstyle_default ? [] : grid.lines_fstyle
				
				Component.onCompleted: makeLater(this);
			}

			GridFaces
			{
				visible: block.option_visible

				data: loader.grid[ block.z ]
				scale_coeff: loader.scale_coeff

				detail: block.option_detail

				style: grid.style_default ? [] : grid.faces_style

				filter: block.z != grid.filter_block ? []: [
					grid.filter_detail_k,
					grid.filter_detail_j, 
					grid.filter_detail_i ]
				
				fstyle: grid.fstyle_default ? [] : grid.faces_fstyle
				
				Component.onCompleted: makeLater(this);
			}

			Component.onCompleted: makeLater(this);
		}
	}
}
