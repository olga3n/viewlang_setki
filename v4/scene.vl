import "obj"

Scene 
{
	id: thescene
	text: ""
	
	property var script_gui_flag: false
	property var script_grid_flag: false
	property var script_lib_flag_1: false
	property var script_lib_flag_2: false

	property var q: script_init()

	function script_init()
	{
		if ( !script_gui_flag )
			la_require( 
				$basePath + "lib/dat.gui/build/dat.gui.min.js",
				function() { 
					
					// add remove folder function
					dat.GUI.prototype.removeFolder = function(name) {
						var folder = this.__folders[name];
						if (!folder) return;
						folder.close();
						this.__ul.removeChild(folder.domElement.parentNode);
						delete this.__folders[name];
						this.onResize();
					}

					script_gui_flag = true; 
				});

		if( !script_lib_flag_1 )
			la_require(
				$basePath + 
				"lib/three.js/examples/js/renderers/Projector.js",
				function() { script_lib_flag_1 = true; });

		if( !script_lib_flag_2 )
			la_require(
				$basePath + 
				"lib/three.js/examples/js/renderers/SVGRenderer.js",
				function() { script_lib_flag_2 = true; });

		if ( !script_grid_flag )
			la_require( 
				$basePath + "js/grid.js", 
				function() { script_grid_flag = true; });
	}

	FileParam
	{
		id: inputFile
		text: "Grid file:"
		file: Qt.resolvedUrl( "../ris5.dat" )
	}

	Load
	{
		id: loader
		file: inputFile.file
	}

	Axis { }

	Repeater
	{
		id: grid
		model: loader.grid.length

		property var gui
		property var q: init_controls()

		property var f_blocks
		property var f_visible
		property var f_detail
		property var f_filter

		property var controls: {}
		property var d_controls: {}
		property var s_controls: {}
		property var fs_controls: {}
		property var id_controls: []

		property var filter_block: -1
		property var filter_detail_i: [1, 1, 1]
		property var filter_detail_j: [1, 1, 1]
		property var filter_detail_k: [1, 1, 1]
		property var items_filter: []

		property var style_default: true
		property var style_filter_default: true

		property var l_directions: [true, true, true, true]
		property var l_colors: 
			["#ffffff", "#ffffff", "#ffffff", "#000000"]
		property var l_options: [false, true]

		property var l_filter_directions: [true, true, true, true]
		property var l_filter_colors: 
			["#000000", "#000000", "#000000", "#0000ff"]
		property var l_filter_options: [false, true]

		property var f_directions: [false, false, false]
		property var f_colors: ["#00ffff", "#ff00ff", "#ffff00"]
		property var f_options: [0.2]

		property var f_filter_directions: [true, true, true]
		property var f_filter_colors: ["#00ff88", "#8800ff", "#ff8800"]
		property var f_filter_options: [0.2]

		property var state_l_materials: 0
		property var state_l_directions: 0

		property var state_f_materials: 0
		property var state_f_directions: 0

		onState_l_materialsChanged: {		

			l_colors = [
				s_controls["lines i color"], 
				s_controls["lines j color"], 
				s_controls["lines k color"], 
				s_controls["border color"]];
			l_options = [
				s_controls["lines dashed"], 
				s_controls["border bold"]];
			
			l_filter_colors = [
				fs_controls["lines i color"], 
				fs_controls["lines j color"], 
				fs_controls["lines k color"], 
				fs_controls["border color"]]
			l_filter_options = [
				fs_controls["lines dashed"], 
				fs_controls["border bold"]];
		}

		onState_l_directionsChanged: {

			if (style_default != s_controls["Default Style"])
				style_default = s_controls["Default Style"];
			if (style_filter_default != fs_controls["Default Style"])
				style_filter_default = fs_controls["Default Style"];
			
			l_directions = [
				s_controls["lines i"], 
				s_controls["lines j"],
				s_controls["lines k"],
				s_controls["internal"]];

			l_filter_directions = [
				fs_controls["lines i"], 
				fs_controls["lines j"],
				fs_controls["lines k"],
				fs_controls["internal"]];
		}

		onState_f_materialsChanged: {
			
			if (style_default != s_controls["Default Style"])
				style_default = s_controls["Default Style"];
			if (style_filter_default != fs_controls["Default Style"])
				style_filter_default = fs_controls["Default Style"];		

			f_colors = [
				s_controls["faces ij color"], 
				s_controls["faces ik color"], 
				s_controls["faces jk color"] ];
			f_options = [
				s_controls["faces opacity"]];

			f_filter_colors = [
				fs_controls["faces ij color"], 
				fs_controls["faces ik color"], 
				fs_controls["faces jk color"] ];
			f_filter_options = [
				fs_controls["faces opacity"]];
		}

		onState_f_directionsChanged: {
			f_directions = [
				s_controls["faces ij"], 
				s_controls["faces ik"], 
				s_controls["faces jk"]];

			f_filter_directions = [
				fs_controls["faces ij"], 
				fs_controls["faces ik"], 
				fs_controls["faces jk"]];
		}

		function init_controls()
		{
			if ( script_gui_flag && script_lib_flag_1 && script_lib_flag_2 )
			{
				gui = new dat.GUI( { width: 350 } );

				f_blocks = gui.addFolder('Blocks');

				f_visible = f_blocks.addFolder("Visible");
				f_detail = f_blocks.addFolder("Detail");

				s_controls["lines i"] = true;
				s_controls["lines j"] = true;
				s_controls["lines k"] = true;
				s_controls["lines i color"] = "#ffffff";
				s_controls["lines j color"] = '#ffffff';
				s_controls["lines k color"] = '#ffffff';
				s_controls["lines dashed"] = false;
				s_controls["border color"] = '#000000';
				s_controls["border bold"] = true;
				s_controls["internal"] = true;
				
				s_controls["faces ij"] = false;
				s_controls["faces ik"] = false;
				s_controls["faces jk"] = false;
				s_controls["faces ij color"] = '#00ffff';
				s_controls["faces ik color"] = '#ff00ff';
				s_controls["faces jk color"] = '#ffff00';
				s_controls["faces opacity"] = 0.2;

				s_controls["Default Style"] = true;

				var c = f_blocks.add(s_controls, "Default Style");

				c.onFinishChange(function(value)
				{ 
					if ( value ) 
					{
						f_blocks.removeFolder("Lines Style");
						f_blocks.removeFolder("Faces Style");
					} 
					else 
					{
						grid.add_style_folders();
						
						grid.state_l_directions = 
							(grid.state_l_directions != 0)? 0: 1;
						grid.state_f_directions = 
							(grid.state_f_directions != 0)? 0: 1;

						/*grid.state_l_materials = 
							(grid.state_l_materials != 0)? 0: 1;
						grid.state_f_directions = 
							(grid.state_f_directions != 0)? 0: 1;*/
					}
					grid.style_default = value;
				});	

				f_filter = gui.addFolder('Filter');

				fs_controls["lines i"] = true;
				fs_controls["lines j"] = true;
				fs_controls["lines k"] = true;
				fs_controls["lines i color"] = "#000000";
				fs_controls["lines j color"] = '#000000';
				fs_controls["lines k color"] = '#000000';
				fs_controls["lines dashed"] = false;
				fs_controls["border color"] = '#0000ff';
				fs_controls["border bold"] = true;
				fs_controls["internal"] = true;
				
				fs_controls["faces ij"] = true;
				fs_controls["faces ik"] = true;
				fs_controls["faces jk"] = true;
				fs_controls["faces ij color"] = '#00ff88';
				fs_controls["faces ik color"] = '#8800ff';
				fs_controls["faces jk color"] = '#ff8800';
				fs_controls["faces opacity"] = 0.2;

				fs_controls["Default Style"] = true;

				var f_export = gui.addFolder('Export');

				renderer_SVG = new THREE.SVGRenderer();
				renderer_SVG.setSize( 
					window.innerWidth, window.innerHeight);

				grid.controls["*.png"] = function() {
						window.open(
							$("body").children("canvas")[0].toDataURL());
					};

				grid.controls["*.svg [slow]"] = function() {
						renderer_SVG.render(scene, camera);
						document.body.appendChild( renderer_SVG.domElement );

						var svg = $("body").children("svg")[0];
						var serializer = new XMLSerializer();
						var svg_blob = new Blob([serializer.serializeToString(svg)], {'type': "image/svg+xml"});
						var url = URL.createObjectURL(svg_blob);

						window.open(url);

						document.body.removeChild( renderer_SVG.domElement );
					};

				f_export.add(grid.controls, "*.png");
				f_export.add(grid.controls, "*.svg [slow]");
			}
		}

		function add_style_controls(f_lines, f_faces, controls)
		{
			var change_l_m = function(value) { 
				grid.state_l_materials =
					(grid.state_l_materials != 0)? 0: 1; }
			var change_l_d = function(value) {
				grid.state_l_directions = 
					(grid.state_l_directions != 0)? 0: 1; }

			var change_f_m = function(value) { 
				grid.state_f_materials =
					(grid.state_f_materials != 0)? 0: 1; }
			var change_f_d = function(value) {
				grid.state_f_directions = 
					(grid.state_f_directions != 0)? 0: 1; }

			f_lines.add(controls, "lines i").onFinishChange(change_l_d); 
			f_lines.add(controls, "lines j").onFinishChange(change_l_d); 
			f_lines.add(controls, "lines k").onFinishChange(change_l_d); 
			f_lines.addColor(controls, "lines i color").onChange(change_l_m); 
			f_lines.addColor(controls, "lines j color").onChange(change_l_m); 
			f_lines.addColor(controls, "lines k color").onChange(change_l_m);
			f_lines.add(controls, "internal").onFinishChange(change_l_d);
			f_lines.add(controls, "lines dashed").onFinishChange(change_l_m); 
			f_lines.addColor(controls, "border color").onChange(change_l_m); 
			f_lines.add(controls, "border bold").onFinishChange(change_l_m); 
							
			f_faces.add(controls, "faces ij").onFinishChange(change_f_d);
			f_faces.add(controls, "faces ik").onFinishChange(change_f_d);
			f_faces.add(controls, "faces jk").onFinishChange(change_f_d);
			f_faces.addColor(controls, "faces ij color").onChange(change_f_m);
			f_faces.addColor(controls, "faces ik color").onChange(change_f_m);
			f_faces.addColor(controls, "faces jk color").onChange(change_f_m);
			f_faces.add(controls, "faces opacity", 0, 1).step(0.05)
				.onFinishChange(change_f_m);
		}

		function add_style_folders()
		{
			var f_lines = f_blocks.addFolder("Lines Style");
			var f_faces = f_blocks.addFolder("Faces Style");

			add_style_controls(f_lines, f_faces, s_controls);
		}

		function add_fstyle_folders()
		{
			var f_lines = f_filter.addFolder("Lines Style");
			var f_faces = f_filter.addFolder("Faces Style");

			add_style_controls(f_lines, f_faces, fs_controls);
		}

		Item
		{
			id: block
			property var z: index

			property var q: add_controls()

			property var option_visible: true
			property var option_detail: [
					Math.floor(loader.grid[ index ].length / 25) + 1,
					Math.floor(loader.grid[ index ][0].length / 25) + 1,
					Math.floor(loader.grid[ index ][0][0].length / 25) + 1
				]
			
			function add_controls()
			{
				if (block.z == 0 && grid.id_controls.length > 0) {

					while(grid.id_controls.length > 0)
					{
						var c = grid.id_controls.pop();
						c[0].remove(c[1]);
					}

					while(grid.items_filter.length > 0)
					{
						var c = grid.items_filter.pop();
						grid.f_filter.remove(c);
					}

					grid.f_filter.removeFolder("Lines Style");
					grid.f_filter.removeFolder("Faces Style");
				}

				var name = "#" + (block.z + 1).toString() + " visible";

				grid.controls[ name ] = true;
				
				var c = grid.f_visible.add(grid.controls, name);
				
				c.onFinishChange(function(value){ 
						block.option_visible = value;
					});

				grid.id_controls.push([grid.f_visible, c]);

				var d = [
					loader.grid[ block.z ].length, 
					loader.grid[ block.z ][0].length, 
					loader.grid[ block.z ][0][0].length]

				name = '#' + (block.z + 1).toString() + " (" + 
					d[2].toString() + ", " + 
					d[1].toString() + ", " +
					d[0].toString() + ")";

				for (var i = 0; i < 3; i++) 
					d[i] = Math.floor(d[i] / 25) + 1;

				grid.d_controls[ name ] = "di = " +
					d[2].toString() + ", dj = " + 
					d[1].toString() + ", dk = " +
					d[0].toString();

				block.option_detail = d;

				var c = grid.f_detail.add(grid.d_controls, name).listen();

				grid.id_controls.push([grid.f_detail, c]);
				
				c.onFinishChange(function(value)
				{ 
					var numb = value.match(/\d+/g);
						
					if(!!numb && numb.length >= 3) {
						block.option_detail = [ 
							parseInt(numb[2]), 
							parseInt(numb[1]), 
							parseInt(numb[0]) ];
					} else {
						block.option_detail = [1, 1, 1];
						value =	'di = 1, dj = 1, dk = 1';
					}
				});

				if (block.z == loader.grid.length - 1) {
					
					grid.controls["all points"] = function() {
						for ( var i = 0; i < grid['$items'].length; i++ )
							grid['$items'][i].option_detail = [1, 1, 1];

						for ( k in grid.d_controls )
							grid.d_controls[k] = 'di = 1, dj = 1, dk = 1';
					};

					var c = grid.f_detail.add(grid.controls, "all points");

					grid.id_controls.push([grid.f_detail, c]);

					// filter

					grid.controls["Block"] = "";

					var lst = [""];

					for ( var i = 1; i <= loader.grid.length; i++ ) 
						lst.push(i.toString());

					var c = grid.f_filter.add(grid.controls, "Block", lst);

					grid.id_controls.push([grid.f_filter, c]);

					c.onFinishChange(function(value)
					{
						if (value != "")
						{
							grid.filter_block = value - 1;

							while(grid.items_filter.length > 0)
							{
								var c = grid.items_filter.pop();
								grid.f_filter.remove(c);
							}

							grid.f_filter.removeFolder("Lines Style");
							grid.f_filter.removeFolder("Faces Style");

							var c, t, l; 

							l = loader.grid[value - 1][0][0].length;
							t = "i (" + l.toString() + ")";
							grid.controls[t] = 
								"from 1 to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_i = [0, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb) {
									var tmp = [1, 1, 1];
									if (numb.length > 0) tmp[0] = parseInt(numb[0]) - 1;
									if (numb.length > 1) tmp[1] = parseInt(numb[1]) - 1;
										else tmp[1] = tmp[0] + 1;
									if (numb.length > 2) tmp[2] = parseInt(numb[2]) - 1;
									grid.filter_detail_i = [tmp[0], tmp[1], tmp[2]];
								} else {
									l = loader.grid[
										grid.filter_block][0][0].length;
									grid.filter_detail_i = [0, l - 1, 1];

									t = "i (" + l.toString() + ")";
									grid.controls[t] = 
										"from 1 to " + l.toString() + " by 1";
								}
							});

							l = loader.grid[value - 1][0].length;
							t = "j (" + l.toString() + ")";
							grid.controls[t] = 
								"from 1 to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_j = [0, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb) {
									var tmp = [1, 1, 1];
									if (numb.length > 0) tmp[0] = parseInt(numb[0]) - 1;
									if (numb.length > 1) tmp[1] = parseInt(numb[1]) - 1;
										else tmp[1] = tmp[0] + 1;
									if (numb.length > 2) tmp[2] = parseInt(numb[2]) - 1;
									grid.filter_detail_j = [tmp[0], tmp[1], tmp[2]];
								} else {
									l = loader.grid[
										grid.filter_block][0].length;
									grid.filter_detail_j = [0, l - 1, 1];

									t = "j (" + l.toString() + ")";
									grid.controls[t] = 
										"from 1 to " + l.toString() + " by 1";
								}
							});

							l = loader.grid[value - 1].length;
							t = "k (" + l.toString() + ")";
							grid.controls[t] = "from " + (l - 1).toString() + 
								" to " + l.toString() + " by 1";
							c = grid.f_filter.add(grid.controls, t).listen();
							grid.items_filter.push(c);
							grid.filter_detail_k = [l - 2, l - 1, 1];

							c.onFinishChange(function(value)
							{ 
								var numb = value.match(/\d+/g);
						
								if(!!numb) {
									var tmp = [1, 1, 1];
									if (numb.length > 0) tmp[0] = parseInt(numb[0]) - 1;
									if (numb.length > 1) tmp[1] = parseInt(numb[1]) - 1;
										else tmp[1] = tmp[0] + 1;
									if (numb.length > 2) tmp[2] = parseInt(numb[2]) - 1;
									grid.filter_detail_k = [tmp[0], tmp[1], tmp[2]];
								} else {
									l = loader.grid[grid.filter_block].length;
									grid.filter_detail_k = [0, l - 1, 1];

									t = "k (" + l.toString() + ")";
									grid.controls[t] = "from 1 to " + 
										l.toString() + " by 1";
								}
							});

							c = grid.f_filter.add(grid.fs_controls, 
								"Default Style");

							if ( !grid.style_filter_default )
								grid.add_fstyle_folders();

							c.onFinishChange(function(value)
							{ 
								if ( value ) 
								{
									grid.f_filter.removeFolder("Lines Style");
									grid.f_filter.removeFolder("Faces Style");
								}
								else
								{
									grid.add_fstyle_folders();
									grid.state_l_directions = 
										(grid.state_l_directions != 0)? 0: 1;
									grid.state_f_directions = 
										(grid.state_f_directions != 0)? 0: 1;
								}

								grid.style_filter_default = value;
							});

							grid.items_filter.push(c);
						} 
						else
						{
							grid.filter_block = -1;

							while(grid.items_filter.length > 0)
							{
								var c = grid.items_filter.pop();
								grid.f_filter.remove(c);
							}

							grid.f_filter.removeFolder("Lines Style");
							grid.f_filter.removeFolder("Faces Style");
						} 
					});
				}
			}

			GridLines
			{
				visible: block.option_visible

				data: loader.grid[ block.z ]
				scale_coeff: loader.scale_coeff

				detail: block.option_detail

				filter: block.z != grid.filter_block ? []: 
					[ grid.filter_detail_k,
					  grid.filter_detail_j, 
					  grid.filter_detail_i ]

				directions: grid.style_default ? [] : grid.l_directions
				colors: grid.style_default ? [] : grid.l_colors
				options: grid.style_default ? [] : grid.l_options

				filter_directions: grid.style_filter_default ? [] : 
					grid.l_filter_directions
				filter_colors: grid.style_filter_default ? [] : 
					grid.l_filter_colors
				filter_options: grid.style_filter_default ? [] : 
					grid.l_filter_options
			}

			GridFaces
			{
				visible: block.option_visible

				data: loader.grid[ block.z ]
				scale_coeff: loader.scale_coeff

				detail: block.option_detail

				filter: block.z != grid.filter_block ? []: 
					[ grid.filter_detail_k,
					  grid.filter_detail_j, 
					  grid.filter_detail_i ]

				directions: grid.style_default ? [] : grid.f_directions
				colors: grid.f_colors
				options:  grid.f_options

				filter_directions: grid.style_filter_default ? [] : 
					grid.f_filter_directions
				filter_colors: grid.f_filter_colors
				filter_options: grid.f_filter_options
			}
		}
	}
}
