import "obj"

Scene 
{
	id: thescene
	text: ""

	property var script_flag: false
	property var q: script_init()

	function script_init()
	{
		if (!script_flag )
		{ 
			la_require( 
				$basePath + "js/smth.js", 
				function() { script_flag = true; }
			);
			
			console.log("require: js/smth.js");
		}
	}

	FileParam
	{
		id: inputFile
		text: "Grid file:"
		file: Qt.resolvedUrl( "../ris5.dat" )
	}

	Load
	{
		id: loader
		file: inputFile.file
	}

	Axis { }

	Column
	{
		property var tag: "left"

		Text 
		{
			text: loader.grid.length ?
				"--- Blocks: " + loader.grid.length + " ---": ""
			property var tag: "left"
		}

		Repeater
		{
			id: zone
			model: loader.grid.length

			Column
			{
				property var tag: "left"

				function combobox_generate(n)
				{
					var lst = [];
					var l = 1;

					if (n == 1)
						l = loader.grid[ index ].length
					if (n == 2)
						l = loader.grid[ index ][0].length
					if (n == 3)
						l = loader.grid[ index ][0][0].length

					for (var i = 1; i < l; i++) lst.push(i);

					return lst;
				}

				CheckBox 
				{
					id: check_zone
					text: "#" + index + " ( " + 
						"i: " + loader.grid[ index ][0][0].length + ", " +
						"j: " + loader.grid[ index ][0].length + ", " +
						"k: " + loader.grid[ index ].length + ")"
					checked: true

					spacing: 5
					width: 220

					Component.onCompleted: makeLater(this);
				}

				Row 
				{
					Text { text: " di: "; y: 2 }

					ComboBox 
					{
						id: step_i
						model: combobox_generate(3)
						currentIndex: Math.floor(
							loader.grid[ index ][0][0].length / 10) * 2

						width: 40
						y: 2
						
						Component.onCompleted: makeLater(this);
					}

					Text { text: " dj: "; y: 2 }

					ComboBox 
					{
						id: step_j
						model: combobox_generate(2)
						currentIndex: Math.floor(
							loader.grid[ index ][0].length / 10) * 2
						
						width: 40
						y: 2
						
						Component.onCompleted: makeLater(this);
					}

					Text { text: " dk: "; y: 2 }

					ComboBox 
					{
						id: step_k
						model: combobox_generate(1)
						currentIndex: Math.floor(
							loader.grid[ index ].length / 10) * 2

						width: 40
						y: 2
						
						Component.onCompleted: makeLater(this);
					}

				}

				Item
				{
					id: grid
					property var z: index

					Smth
					{
						data: loader.grid[ grid.z ]
						scale_coeff:loader.scale_coeff
						
						detail: [
							step_k.currentText, 
							step_j.currentText, 
							step_i.currentText ]

						modes: (mode_default.checked)? [] : [
							[ 
								line_1.checked, 
								line_2.checked, 
								line_3.checked, 
								[
									line_dashed.checked,

									color_line_1.value, 
									color_line_2.value, 
									color_line_3.value 
								],
								[ border_bold.checked, color_border.value ] 
							],
							[ 
								face_1.checked, 
								face_2.checked, 
								face_3.checked, 
								[
									face_opacity.value, 

									color_face_1.value, 
									color_face_2.value, 
									color_face_3.value 
								] 
							], [ border_spheres.checked ] ]

						visible: check_zone.checked

						Component.onCompleted: makeLater(this);
					}

					Component.onCompleted: makeLater(this);
				}
			}
		}

		Row 
		{
			Text { text: "--- Mode ---"; y: 2 }

			CheckBox 
			{
				id: mode_default
				text: "default"
				checked: true

				spacing: 5
				width: 80
			}
		}

		Row 
		{
			visible: !mode_default.checked

			Text { text: "Lines"; y: 2 }

			CheckBox 
			{
				id: line_1
				text: "1(i)"
				checked: true

				spacing: 5
				width: 50
			}

			CheckBox 
			{
				id: line_2
				text: "2(j)"
				checked: true

				spacing: 5
				width: 50
			}

			CheckBox 
			{
				id: line_3
				text: "3(k)"
				checked: true

				spacing: 5
				width: 50
			}
		}

		Row
		{
			visible: !mode_default.checked

			CheckBox 
			{
				id: line_dashed
				text: "dashed"
				checked: false

				spacing: 5
				width: 90
			}

			Text { text: "colors"; y: 2 }

			Picker { id: color_line_1; value: '#ffffff' }

			Picker { id: color_line_2; value: '#ffffff' }

			Picker { id: color_line_3; value: '#ffffff' }
		}

		Row
		{
			visible: !mode_default.checked

			Text { text: "Border"; y: 2 }

			CheckBox 
			{
				id: border_bold
				text: "bold"
				checked: true

				spacing: 5
				width: 60
			}

			CheckBox 
			{
				id: border_spheres
				text: "vertices"
				checked: true

				spacing: 5
				width: 90
			}

			Text { text: "color"; y: 2 }

			Picker { id: color_border }
		}

		Row 
		{
			visible: !mode_default.checked

			Text { text: "Faces"; y: 2 }

			CheckBox 
			{
				id: face_1
				text: "1(ij)"
				checked: false

				spacing: 5
				width: 55
			}

			CheckBox 
			{
				id: face_2
				text: "2(ik)"
				checked: false

				spacing: 5
				width: 55
			}

			CheckBox 
			{
				id: face_3
				text: "3(jk)"
				checked: false

				spacing: 5
				width: 55
			}
		}

		Row
		{
			visible: !mode_default.checked

			Text { text: " opacity"; y: 2 }

			Slider
			{
				id: face_opacity

				minimumValue: 0.0
				maximumValue: 1.0
				stepSize: 0.1
				value: 0.1
				
				updateValueWhileDragging: false
				width: 60
			}

			Text { text: " colors"; y: 2 }

			Picker { id: color_face_1; value: '#00ffff' }

			Picker { id: color_face_2; value: '#ff00ff' }

			Picker { id: color_face_3; value: '#ffff00' }
		}
	}
}